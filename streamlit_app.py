# streamlit_app.py
import json
import requests
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import matplotlib as mpl
import textwrap
import os
import urllib.request
import json as _json
from collections import Counter, defaultdict
from datetime import datetime, timezone

# ---------------- Fonts (Thai) ----------------
# ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ TH Sarabun New ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡πÄ‡∏ä‡πà‡∏ô thsarabunnew-webfont.ttf)
try:
    if os.path.exists("thsarabunnew-webfont.ttf"):
        mpl.font_manager.fontManager.addfont("thsarabunnew-webfont.ttf")
        mpl.rc("font", family="TH Sarabun New", size=20)
    else:
        # fallback ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏û‡∏≠‡∏Ñ‡∏ß‡∏£‡∏ö‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
        plt.rcParams["font.family"] = "Tahoma"
        mpl.rc("font", family="DejaVu Sans", size=12)
except Exception:
    plt.rcParams["font.family"] = "DejaVu Sans"

plt.rcParams["axes.unicode_minus"] = False

# ---------------- Page Config (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Wide Mode) ----------------
st.set_page_config(page_title="MCQ Answer Sheet", page_icon="üìù", layout="wide")

# ---------------- Custom CSS for Mobile UI/Card Style ----------------
def load_css():
    st.markdown("""
        <style>
        /* 1. Mobile-friendly: Reduce padding around main content */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            padding-left: 1rem !important; /* Force minimal padding on sides */
            padding-right: 1rem !important; /* Force minimal padding on sides */
        }
        
        /* 2. Style for Question Card */
        .stQuestionCard {
            border: 1px solid #e0e0e0;
            border-radius: 12px; /* Soften the corners */
            padding: 15px;
            margin-bottom: 12px; /* Space between cards */
            box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.05); /* Soft shadow */
            background-color: #ffffff; /* White background */
        }

        /* 3. Reduce vertical space (st.divider) in form */
        div[data-testid="stDivider"] {
            margin-top: 5px;
            margin-bottom: 10px;
        }
        
        /* 4. Make radio buttons more visually distinct */
        div[data-testid*="stRadio"] label {
            padding: 5px 10px;
            border-radius: 8px;
            margin: 2px;
            transition: background-color 0.1s;
        }
        /* Highlight selected option */
        div[data-testid*="stRadio"] label[data-baseweb="radio"]:has(input:checked) {
            background-color: #e6f7ff; /* Light blue background for selected */
            border-left: 3px solid var(--primary-color); /* Primary color stripe */
        }
        </style>
        """, unsafe_allow_html=True)

# ---------------- Secrets / Config ----------------
GAS_WEBAPP_URL = st.secrets.get("gas", {}).get("webapp_url", "").strip()
TEACHER_KEY    = st.secrets.get("app", {}).get("teacher_key", "").strip()
TIMEOUT        = 25

# ---------------- GAS Helpers ----------------
# ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
# (‡πÄ‡∏ä‡πà‡∏ô def gas_get, def gas_post, def get_active_exam, def get_exam_data)
# ...

# ---------------- Session State Helpers ----------------
# ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
# (‡πÄ‡∏ä‡πà‡∏ô def init_session_state, def get_mode_from_url)
# ...

# ---------------- Pages ----------------
def page_exam():
    # ‡πÇ‡∏´‡∏•‡∏î CSS
    load_css() 
    
    st.title("üìù ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö MCQ")
    
    # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö ...
    
    # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ ...
    
    # ... ‡πÇ‡∏Ñ‡πâ‡∏î session_state ...

    is_pending = ss["pending_submit_payload"] is not None
    disabled_all = ss["submitted"] or is_pending

    with st.form("exam_form", clear_on_submit=False):
        # ‡∏´‡∏∏‡πâ‡∏° ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö ‡∏î‡πâ‡∏ß‡∏¢ Container
        with st.container(border=True):
             st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö")
             name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", disabled=disabled_all)
        
        st.markdown("### ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
        options = ["A", "B", "C", "D", "E"]
        if len(ss["answers"]) != qn:
            ss["answers"] = [""] * qn

        # ‡∏•‡∏π‡∏õ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ‡∏´‡∏∏‡πâ‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Card
        for i in range(qn):
            current = ss["answers"][i]
            
            # ‡πÅ‡∏ó‡∏£‡∏Å HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Card Style
            st.markdown('<div class="stQuestionCard">', unsafe_allow_html=True) 
            
            st.markdown(f"**‡∏Ç‡πâ‡∏≠ {i+1}**") # ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠
            
            choice = st.radio(
                f" ", # ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Label ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                options=[""] + options,
                index=([""] + options).index(current) if current in ([""] + options) else 0,
                horizontal=True,
                disabled=disabled_all,
                key=f"q_{i+1}_radio_form",
            )
            ss["answers"][i] = choice
            
            st.divider() 
            
            st.markdown('</div>', unsafe_allow_html=True) # ‡∏õ‡∏¥‡∏î Card
        
        # ... ‡∏õ‡∏∏‡πà‡∏°‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö ...
        # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏∏‡πà‡∏° submit) ...

def page_dashboard():
    # ‡πÇ‡∏´‡∏•‡∏î CSS (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ‡∏Å‡∏≤‡∏£‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Container ‡πÅ‡∏•‡∏∞ Divider ‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô)
    load_css()
    
    # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ...

    # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å ...

        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
        try:
            # ... ‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥ ...
            
            # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
            with st.expander("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)"):
                show = df[["timestamp", "student_name", "score", "percent", "answers"]].copy()
                show.columns = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"]
                st.dataframe(show, hide_index=True, use_container_width=True) # use_container_width=True

            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
            # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢/‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î/‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°) ...

            # ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            with st.container(border=True):
                st.markdown("##### ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á fig) ...
                st.pyplot(fig, use_container_width=True)
            
            # Item Analysis
            if qn > 0 and total > 0:
                # ... (‡πÇ‡∏Ñ‡πâ‡∏î‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì item analysis) ...
                
                if isinstance(answer_key, list) and any(answer_key):
                    # Item Analysis (‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢)
                    # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Item Analysis ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
                    with st.expander("‚úÖ Item Analysis ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠"):
                        st.dataframe(item_df, hide_index=True, use_container_width=True)
                        
                        # ... ‡∏Å‡∏£‡∏≤‡∏ü % ‡∏ñ‡∏π‡∏Å
                        st.pyplot(fig1, use_container_width=True)
                        
                        st.caption(f"üîé ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏Ç‡πâ‡∏≠ {hardest['‡∏Ç‡πâ‡∏≠']} (‡∏ñ‡∏π‡∏Å {hardest['%‡∏ñ‡∏π‡∏Å']}%)")
                else:
                    # Distribution (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢)
                    # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Distribution ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
                    with st.expander("üìä Item Analysis ‚Äî ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠"):
                        st.dataframe(dist_df, hide_index=True, use_container_width=True)
                        
                        # ... ‡∏Å‡∏£‡∏≤‡∏ü stacked distribution
                        st.pyplot(figd, use_container_width=True)
                        
                        st.info("‚ÑπÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢ (answer_key) ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ ‚Äî "
                                "‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Active (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å get_active_exam) "
                                "‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏ù‡∏±‡πà‡∏á GAS ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô answer_key ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ----------------------------------------------------------------------
# ====================== Run Main App ======================\n
# ----------------------------------------------------------------------

# ... (‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏£‡∏±‡∏ô Main App) ...
# (‡πÄ‡∏ä‡πà‡∏ô if mode == 'teacher': page_dashboard() else: page_exam())
# ...
