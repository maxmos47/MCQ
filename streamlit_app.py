import json
import requests
import pandas as pd
import streamlit as st
import math

st.set_page_config(page_title="MCQ Answer Sheet", page_icon="üìù", layout="centered")

# ===============
# SETTINGS (via secrets.toml)
# ===============
GAS_WEBAPP_URL = st.secrets.get("gas", {}).get("webapp_url", "").strip()
TEACHER_KEY = st.secrets.get("app", {}).get("teacher_key", "").strip()

if not GAS_WEBAPP_URL:
    st.warning("‚ö†Ô∏è Please set [gas] webapp_url in .streamlit/secrets.toml")
    
# Helper: call GAS
def gas_get(action: str):
    url = f"{GAS_WEBAPP_URL}?action={action}"
    r = requests.get(url, timeout=30)
    return r.json()

def gas_post(action: str, payload: dict):
    url = f"{GAS_WEBAPP_URL}?action={action}"
    r = requests.post(url, json=payload, timeout=30)
    return r.json()

# üîß robust query-param handling
raw_mode = st.query_params.get("mode", "exam")
# Streamlit >=1.30 returns str, older versions may return list; handle both
if isinstance(raw_mode, list) and raw_mode:
    raw_mode = raw_mode[0]
mode = str(raw_mode).strip().lower()

# Common: fetch config
def fetch_config():
    try:
        js = gas_get("get_config")
        if js.get("ok"):
            return js["data"]
        else:
            st.error(f"Config error: {js.get('error')}")
    except Exception as e:
        st.error(f"Failed to get config: {e}")
    return None

# ----------------------
# STUDENT EXAM PAGE
# ----------------------
def page_exam():
    st.markdown("### üìù ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö MCQ (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠)")
    cfg = fetch_config()
    if not cfg:
        return
    qn = int(cfg.get("question_count", 0))
    correct = cfg.get("correct_answers", [])
    if qn <= 0 or not correct or len(correct) != qn:
        st.error("‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏ô Google Sheet ‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (Question_Count / Correct_Answers)")
        return
    
    st.info(f"‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {qn} ‡∏Ç‡πâ‡∏≠ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å A‚ÄìE)")
    name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    options = ["A", "B", "C", "D", "E"]

    # Persist answers in session (handy on mobile)
    if "answers" not in st.session_state:
        st.session_state["answers"] = [""]*qn

    cols = st.columns(1)
    with cols[0]:
        for i in range(qn):
            st.session_state["answers"][i] = st.selectbox(
                f"‡∏Ç‡πâ‡∏≠ {i+1}",
                options=[""] + options,
                index=([""] + options).index(st.session_state["answers"][i]) if st.session_state["answers"][i] in ([""]+options) else 0,
                key=f"q_{i+1}",
            )
    if st.button("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", type="primary", use_container_width=True):
        if not name.strip():
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠")
            return
        filled = [a for a in st.session_state["answers"] if a]
        if len(filled) == 0:
            st.warning("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠")
            return
        try:
            js = gas_post("submit", {"student_name": name.strip(), "answers": st.session_state["answers"]})
            if js.get("ok"):
                res = js["data"]
                st.success(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {res['score']} / {qn} ({res['percent']}%)")
                # Show detail
                with st.expander("‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠ / ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"):
                    df = pd.DataFrame(res["detail"])
                    df["status"] = df["is_correct"].map({True:"‡∏ñ‡∏π‡∏Å", False:"‡∏ú‡∏¥‡∏î"})
                    df = df[["q","ans","correct","status"]]
                    df.columns = ["‡∏Ç‡πâ‡∏≠","‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö","‡πÄ‡∏â‡∏•‡∏¢","‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
                    st.dataframe(df, hide_index=True, use_container_width=True)
            else:
                st.error(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {js.get('error')}")
        except Exception as e:
            st.error(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ----------------------
# TEACHER DASHBOARD
# ----------------------
def page_dashboard():
    st.markdown("### üë©‚Äçüè´ Dashboard ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå")
    key_in = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True) or key_in:
        if not TEACHER_KEY:
            st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ô secrets.toml (app.teacher_key)")
            return
        if key_in != TEACHER_KEY:
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            return

        st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")
        cfg = fetch_config()
        if not cfg:
            return
        qn = int(cfg.get("question_count", 0))
        correct = cfg.get("correct_answers", [])

        try:
            js = gas_get("get_dashboard")
            if not js.get("ok"):
                st.error(js.get("error", "Unknown error"))
                return
            records = js["data"]
            if not records:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
                return
            # Table
            df = pd.DataFrame(records)
            df["timestamp"] = pd.to_datetime(df["timestamp"])
            df = df.sort_values("timestamp", ascending=True)

            st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô")
            show = df[["timestamp","student_name","score","percent","answers"]].copy()
            show.columns = ["‡πÄ‡∏ß‡∏•‡∏≤","‡∏ä‡∏∑‡πà‡∏≠","‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô","‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå","‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"]
            st.dataframe(show, hide_index=True, use_container_width=True)

            # Stats
            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
            avg = float(df["percent"].mean())
            best = int(df["percent"].max())
            worst = int(df["percent"].min())
            st.write(f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg:.1f}% | ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best}% | ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {worst}%")

            # Bar chart (matplotlib default style/colors)
            import matplotlib.pyplot as plt
            fig = plt.figure()
            plt.bar(df["student_name"], df["percent"])
            plt.xticks(rotation=45, ha="right")
            plt.ylabel("Percent")
            plt.title("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%) ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô")
            st.pyplot(fig, use_container_width=True)

            # Item Analysis
            st.subheader("Item Analysis (‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏Ñ‡∏ô‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠)")
            # Recompute from answers + correct
            counts = [0]*qn
            total = len(df)
            for _, row in df.iterrows():
                ans = [s.strip().upper() for s in str(row["answers"]).split(",")]
                for i in range(qn):
                    if i < len(ans) and ans[i] == correct[i]:
                        counts[i] += 1
            perc = [ round((c*100)/total) if total>0 else 0 for c in counts ]
            item_df = pd.DataFrame({"‡∏Ç‡πâ‡∏≠": [i+1 for i in range(qn)], "%‡∏ñ‡∏π‡∏Å": perc})
            st.dataframe(item_df, hide_index=True, use_container_width=True)

            fig2 = plt.figure()
            plt.plot(item_df["‡∏Ç‡πâ‡∏≠"], item_df["%‡∏ñ‡∏π‡∏Å"], marker="o")
            plt.xlabel("‡∏Ç‡πâ‡∏≠")
            plt.ylabel("% ‡∏ñ‡∏π‡∏Å")
            plt.title("Item Difficulty")
            st.pyplot(fig2, use_container_width=True)

        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# Router
if mode == "dashboard":
    page_dashboard()
else:
    page_exam()
