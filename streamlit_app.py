# streamlit_app.py
import json
import requests
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import matplotlib as mpl
import textwrap
import os
import urllib.request
import json as _json
from collections import Counter, defaultdict
from datetime import datetime, timezone

# ---------------- Fonts (Thai) ----------------
# ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ TH Sarabun New ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡πÄ‡∏ä‡πà‡∏ô thsarabunnew-webfont.ttf)
try:
    if os.path.exists("thsarabunnew-webfont.ttf"):
        mpl.font_manager.fontManager.addfont("thsarabunnew-webfont.ttf")
        mpl.rc("font", family="TH Sarabun New", size=20)
    else:
        # fallback ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏û‡∏≠‡∏Ñ‡∏ß‡∏£‡∏ö‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
        plt.rcParams["font.family"] = "Tahoma"
        mpl.rc("font", family="DejaVu Sans", size=12)
except Exception:
    plt.rcParams["font.family"] = "DejaVu Sans"

plt.rcParams["axes.unicode_minus"] = False

# ---------------- Page Config (‡∏õ‡∏£‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô Wide Mode) ----------------
st.set_page_config(page_title="MCQ Answer Sheet", page_icon="üìù", layout="wide")

# ---------------- Custom CSS for Mobile UI/Card Style ----------------
def load_css():
    st.markdown("""
        <style>
        /* 1. Mobile-friendly: Reduce padding around main content */
        .block-container {
            padding-top: 2rem;
            padding-bottom: 2rem;
            padding-left: 1rem !important; /* Force minimal padding on sides */
            padding-right: 1rem !important; /* Force minimal padding on sides */
        }
        
        /* 2. Style for Question Card */
        .stQuestionCard {
            border: 1px solid #e0e0e0;
            border-radius: 12px; /* Soften the corners */
            padding: 15px;
            margin-bottom: 12px; /* Space between cards */
            box-shadow: 1px 1px 5px rgba(0, 0, 0, 0.05); /* Soft shadow */
            background-color: #ffffff; /* White background */
        }

        /* 3. Reduce vertical space (st.divider) in form */
        div[data-testid="stDivider"] {
            margin-top: 5px;
            margin-bottom: 10px;
        }
        
        /* 4. Make radio buttons more visually distinct */
        div[data-testid*="stRadio"] label {
            padding: 5px 10px;
            border-radius: 8px;
            margin: 2px;
            transition: background-color 0.1s;
        }
        /* Highlight selected option */
        div[data-testid*="stRadio"] label[data-baseweb="radio"]:has(input:checked) {
            background-color: #e6f7ff; /* Light blue background for selected */
            border-left: 3px solid var(--primary-color); /* Primary color stripe */
        }
        </style>
        """, unsafe_allow_html=True)

# ---------------- Secrets / Config ----------------
GAS_WEBAPP_URL = st.secrets.get("gas", {}).get("webapp_url", "").strip()
TEACHER_KEY    = st.secrets.get("app", {}).get("teacher_key", "").strip()
TIMEOUT        = 25

# ---------------- GAS Helpers ----------------
def gas_get(action: str, params: dict):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    url = f"{GAS_WEBAPP_URL}?action={action}&{urllib.parse.urlencode(params)}"
    try:
        with urllib.request.urlopen(url, timeout=TIMEOUT) as response:
            return _json.loads(response.read().decode())
    except Exception as e:
        return {"success": False, "error": str(e)}

def gas_post(action: str, payload: dict):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    url = f"{GAS_WEBAPP_URL}?action={action}"
    try:
        headers = {"Content-Type": "application/json"}
        req = urllib.request.Request(url, data=json.dumps(payload).encode(), headers=headers)
        with urllib.request.urlopen(req, timeout=TIMEOUT) as response:
            return _json.loads(response.read().decode())
    except Exception as e:
        return {"success": False, "error": str(e)}

def get_active_exam():
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    return gas_get("get_active_exam", {})

def get_exam_data(exam_id: str):
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    return gas_get("get_exam_data", {"exam_id": exam_id})

# ---------------- Session State Helpers ----------------
ss = st.session_state

def init_session_state():
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    if "answers" not in ss:
        ss["answers"] = []
    if "submitted" not in ss:
        ss["submitted"] = False
    if "payload" not in ss:
        ss["payload"] = None
    if "pending_submit_payload" not in ss:
        ss["pending_submit_payload"] = None

def get_mode_from_url():
    # ... (‡∏™‡πà‡∏ß‡∏ô‡∏ô‡∏µ‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°) ...
    if "key" in st.query_params and st.query_params["key"] == TEACHER_KEY:
        return "teacher"
    return "student"

# ---------------- Pages ----------------
def page_exam():
    # ‡πÇ‡∏´‡∏•‡∏î CSS
    load_css() 
    
    st.title("üìù ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö MCQ")
    
    init_session_state()
    
    st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö...", icon="‚è≥")
    
    exam_data = get_active_exam()
    st.empty() # Clear loading message
    
    if not exam_data.get("success", False):
        st.error(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡∏¥‡∏î‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏≠‡∏¢‡∏π‡πà: {exam_data.get('error', '‡πÇ‡∏õ‡∏£‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ GAS')}")
        return

    exam_id = exam_data.get("exam_id")
    qn = exam_data.get("qn", 0)
    
    if qn == 0:
        st.warning("‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ô‡∏µ‡πâ‡∏°‡∏µ 0 ‡∏Ç‡πâ‡∏≠")
        return

    # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)
    time_limit_minutes = exam_data.get("time_limit", 0)
    end_time_iso = exam_data.get("end_time")

    now_utc = datetime.now(timezone.utc)
    
    # Check if a time limit exists and if the exam has ended
    if end_time_iso:
        end_time = datetime.fromisoformat(end_time_iso.replace('Z', '+00:00'))
        if now_utc > end_time:
            if not ss["submitted"]:
                st.error("‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
            else:
                st.success("‡∏Ñ‡∏∏‡∏ì‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
            
            # Show exam info but disable controls
            st.info(f"‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {exam_id}, ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qn} ‡∏Ç‡πâ‡∏≠")
            
            # Try to show score if available
            if ss["payload"] and ss["payload"].get("score") is not None:
                 st.metric(label="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", value=f"{ss['payload']['score']} / {qn}")

            return
        
        # Display remaining time if not submitted
        if not ss["submitted"]:
            time_remaining = end_time - now_utc
            minutes_remaining = int(time_remaining.total_seconds() // 60)
            seconds_remaining = int(time_remaining.total_seconds() % 60)
            
            # Display countdown in a fixed sidebar/header element (simplified here)
            st.sidebar.markdown(f"**‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏ß‡∏•‡∏≤:** **{minutes_remaining}** ‡∏ô‡∏≤‡∏ó‡∏µ **{seconds_remaining}** ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ")
            
            # Auto-refresh to update countdown
            if time_remaining.total_seconds() > 0:
                from time import sleep
                sleep(1)
                st.rerun()

    is_pending = ss["pending_submit_payload"] is not None
    disabled_all = ss["submitted"] or is_pending

    with st.form("exam_form", clear_on_submit=False):
        # ‡∏´‡∏∏‡πâ‡∏° ‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö ‡∏î‡πâ‡∏ß‡∏¢ Container
        with st.container(border=True):
             st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö")
             name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", disabled=disabled_all)
        
        st.markdown("### ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö")
        options = ["A", "B", "C", "D", "E"]
        if len(ss["answers"]) != qn:
            ss["answers"] = [""] * qn

        # ‡∏•‡∏π‡∏õ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°: ‡∏´‡∏∏‡πâ‡∏°‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏î‡πâ‡∏ß‡∏¢ Card
        for i in range(qn):
            current = ss["answers"][i]
            
            # ‡πÅ‡∏ó‡∏£‡∏Å HTML ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Card Style
            st.markdown('<div class="stQuestionCard">', unsafe_allow_html=True) 
            
            st.markdown(f"**‡∏Ç‡πâ‡∏≠ {i+1}**") # ‡πÄ‡∏ô‡πâ‡∏ô‡πÄ‡∏•‡∏Ç‡∏Ç‡πâ‡∏≠
            
            choice = st.radio(
                f" ", # ‡πÉ‡∏ä‡πâ‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÄ‡∏õ‡πá‡∏ô Label ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ã‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ã‡πâ‡∏≥
                options=[""] + options,
                index=([""] + options).index(current) if current in ([""] + options) else 0,
                horizontal=True,
                disabled=disabled_all,
                key=f"q_{i+1}_radio_form",
            )
            ss["answers"][i] = choice
            
            st.divider() 
            
            st.markdown('</div>', unsafe_allow_html=True) # ‡∏õ‡∏¥‡∏î Card
        
        # --- Submit Button Logic ---
        submitted = st.form_submit_button("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", disabled=disabled_all or not name.strip())

        if submitted:
            if not name.strip():
                st.error("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö")
            else:
                payload = {
                    "exam_id": exam_id,
                    "student_name": name.strip(),
                    "answers": ss["answers"],
                }
                ss["pending_submit_payload"] = payload
                st.rerun() # Trigger rerun to submit outside of form

    if is_pending:
        st.info("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö...", icon="üìß")
        
        # Check time again before submission
        if end_time_iso:
            end_time = datetime.fromisoformat(end_time_iso.replace('Z', '+00:00'))
            if datetime.now(timezone.utc) > end_time:
                st.error("‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: ‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß")
                ss["pending_submit_payload"] = None
                return

        response = gas_post("submit_answer", ss["pending_submit_payload"])
        st.empty() # Clear submitting message

        if response.get("success", False):
            ss["submitted"] = True
            ss["payload"] = response.get("payload")
            st.success("‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à! ‚ú®")
            
            # Show score
            if ss["payload"] and ss["payload"].get("score") is not None:
                st.metric(label="‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", value=f"{ss['payload']['score']} / {qn}")
            else:
                st.info("‡πÑ‡∏°‡πà‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô ‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏õ‡∏¥‡∏î‡πÄ‡∏â‡∏•‡∏¢‡∏ó‡∏±‡∏ô‡∏ó‡∏µ")
            
            st.balloons()
        else:
            st.error(f"‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {response.get('error', 'Unknown Error')}")
        
        ss["pending_submit_payload"] = None
        st.rerun()

def page_dashboard():
    # ‡πÇ‡∏´‡∏•‡∏î CSS
    load_css()
    
    st.title("üë®‚Äçüè´ Dashboard")
    
    init_session_state()
    
    teacher_key_input = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", type="password", 
                                      value=st.query_params.get("key", "") or TEACHER_KEY)
    
    if teacher_key_input != TEACHER_KEY:
        st.error("‡∏£‡∏´‡∏±‡∏™‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
        return
    
    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    exams_res = gas_get("get_exam_ids", {})
    if not exams_res.get("success", False):
        st.error(f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö: {exams_res.get('error', 'Unknown Error')}")
        return

    exam_ids = exams_res.get("exam_ids", [])
    if not exam_ids:
        st.info("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
        return

    # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
    selected_id = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö", exam_ids)

    if selected_id:
        st.info(f"‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î **{selected_id}**...", icon="‚è≥")
        exam_data = get_exam_data(selected_id)
        st.empty() # Clear loading message

        if not exam_data.get("success", False):
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {exam_data.get('error', 'Unknown Error')}")
            return

        qn = exam_data.get("qn", 0)
        df_raw = exam_data.get("df", [])
        answer_key = exam_data.get("answer_key", [])
        total = len(df_raw)
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô DataFrame
        df = pd.DataFrame(df_raw)

        # ---------------- ‡∏™‡πà‡∏ß‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ----------------
        
        # ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç Indentation Error: ‡∏¢‡πâ‡∏≤‡∏¢ st.subheader ‡πÉ‡∏´‡πâ‡∏ñ‡∏π‡∏Å‡∏ó‡∏µ‡πà
        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
        try:
            if total == 0:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
                return

            st.metric(label="‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", value=total)
            
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
            scores = df["score"].tolist()
            
            st.metric("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢", f"{pd.Series(scores).mean():.2f} / {qn}")
            st.markdown(f"**‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î:** {max(scores)} / {qn} | **‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î:** {min(scores)} / {qn}")
            
            # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô‡∏Ç‡∏ô‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà
            with st.expander("üìä ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô (‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î)"):
                show = df[["timestamp", "student_name", "score", "percent", "answers"]].copy()
                show.columns = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"]
                st.dataframe(show, hide_index=True, use_container_width=True) # use_container_width=True

            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
            
            # ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
            with st.container(border=True):
                st.markdown("##### ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                fig, ax = plt.subplots(figsize=(10, 5))
                ax.hist(scores, bins=range(0, qn + 2), align='left', rwidth=0.8, color='skyblue', edgecolor='black')
                ax.set_xticks(range(0, qn + 1))
                ax.set_xlabel("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô")
                ax.set_ylabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô")
                ax.set_title("‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏≠‡∏ö", fontsize=14, pad=12)
                plt.tight_layout()
                st.pyplot(fig, use_container_width=True)
            
            # Item Analysis
            if qn > 0 and total > 0:
                all_opts = ["A", "B", "C", "D", "E", ""]
                
                # Distribution Count
                dist_counts = Counter()
                for ans_list in df["answers"].tolist():
                    for i, ans in enumerate(ans_list):
                        dist_counts[(i + 1, ans)] += 1

                dist_data = defaultdict(lambda: {'‡∏Ç‡πâ‡∏≠': 0, **{o: 0 for o in all_opts}})
                for (q_num, choice), count in dist_counts.items():
                    dist_data[q_num]['‡∏Ç‡πâ‡∏≠'] = q_num
                    dist_data[q_num][choice] = count

                dist_df = pd.DataFrame(list(dist_data.values())).sort_values(by='‡∏Ç‡πâ‡∏≠')
                
                # Check if answer key is valid
                if isinstance(answer_key, list) and len(answer_key) == qn and any(answer_key):
                    # Item Analysis (‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢)
                    correct_counts = Counter()
                    for ans_list in df["answers"].tolist():
                        for i, ans in enumerate(ans_list):
                            if i < qn and ans == answer_key[i]:
                                correct_counts[i + 1] += 1
                    
                    # Create Item Analysis DataFrame
                    item_df_data = []
                    hardest = {'‡∏Ç‡πâ‡∏≠': 0, '%‡∏ñ‡∏π‡∏Å': 101}
                    for i in range(qn):
                        q_num = i + 1
                        correct = correct_counts[q_num]
                        percent_correct = (correct / total) * 100
                        item_df_data.append({
                            "‡∏Ç‡πâ‡∏≠": q_num,
                            "‡πÄ‡∏â‡∏•‡∏¢": answer_key[i],
                            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏π‡∏Å": correct,
                            "%‡∏ñ‡∏π‡∏Å": f"{percent_correct:.2f}%",
                        })
                        if percent_correct < hardest['%‡∏ñ‡∏π‡∏Å']:
                            hardest = {'‡∏Ç‡πâ‡∏≠': q_num, '%‡∏ñ‡∏π‡∏Å': f"{percent_correct:.2f}"}

                    item_df = pd.DataFrame(item_df_data)

                    # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Item Analysis ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
                    with st.expander("‚úÖ Item Analysis ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠"):
                        st.dataframe(item_df, hide_index=True, use_container_width=True)
                        
                        # ‡∏Å‡∏£‡∏≤‡∏ü % ‡∏ñ‡∏π‡∏Å
                        fig1, ax1 = plt.subplots(figsize=(10, max(3.5, 0.4 * qn)))
                        y = item_df["‡∏Ç‡πâ‡∏≠"].astype(str)
                        width = [float(p.strip('%')) for p in item_df["%‡∏ñ‡∏π‡∏Å"].tolist()]
                        ax1.barh(y, width, color='lightgreen', edgecolor='black')
                        ax1.set_xlim(0, 100)
                        ax1.set_xlabel("‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å")
                        ax1.set_ylabel("‡∏Ç‡πâ‡∏≠")
                        ax1.set_title("‡∏£‡πâ‡∏≠‡∏¢‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠", fontsize=14, pad=12)
                        plt.tight_layout()
                        st.pyplot(fig1, use_container_width=True)
                        
                        st.caption(f"üîé ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: **‡∏Ç‡πâ‡∏≠ {hardest['‡∏Ç‡πâ‡∏≠']}** (‡∏ñ‡∏π‡∏Å {hardest['%‡∏ñ‡∏π‡∏Å']}%)")
                else:
                    # Distribution (‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢)
                    # ‡πÉ‡∏ä‡πâ expander ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏≤‡∏£‡∏≤‡∏á Distribution ‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≤‡∏ü
                    with st.expander("üìä Item Analysis ‚Äî ‡πÅ‡∏à‡∏Å‡πÅ‡∏à‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠"):
                        st.dataframe(dist_df, hide_index=True, use_container_width=True)
                        
                        # ‡∏Å‡∏£‡∏≤‡∏ü stacked distribution
                        figd, axd = plt.subplots(figsize=(10, max(3.5, 0.55 * len(dist_df))))
                        y = dist_df["‡∏Ç‡πâ‡∏≠"].astype(str)
                        left = [0] * len(dist_df)
                        for o in all_opts:
                            vals = dist_df[o].tolist()
                            axd.barh(y, vals, left=left, label=o)
                            left = [l + v for l, v in zip(left, vals)]
                        axd.set_xlabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", fontsize=12)
                        axd.set_ylabel("‡∏Ç‡πâ‡∏≠", fontsize=12)
                        axd.set_title("Distribution ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠ (A‚ÄìE/‡πÄ‡∏ß‡πâ‡∏ô‡∏ß‡πà‡∏≤‡∏á)", fontsize=14, pad=12)
                        axd.legend(loc="lower right", ncol=3)
                        plt.tight_layout()
                        st.pyplot(figd, use_container_width=True)
                        
                        st.info("‚ÑπÔ∏è ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡πÄ‡∏â‡∏•‡∏¢ (answer_key) ‡∏à‡∏∂‡∏á‡∏à‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ ‚Äî "
                                "‡∏ó‡∏≥‡πÑ‡∏î‡πâ‡πÇ‡∏î‡∏¢‡∏ï‡∏±‡πâ‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Active (‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å get_active_exam) "
                                "‡∏´‡∏£‡∏∑‡∏≠‡πÄ‡∏û‡∏¥‡πà‡∏° endpoint ‡∏ù‡∏±‡πà‡∏á GAS ‡∏ó‡∏µ‡πà‡∏Ñ‡∏∑‡∏ô answer_key ‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å")
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ----------------------------------------------------------------------
# ====================== Run Main App ======================\n
# ----------------------------------------------------------------------

init_session_state()
mode = get_mode_from_url()

if mode == 'teacher':
    page_dashboard()
else:
    page_exam()
