# streamlit_app.py
import json
import requests
import pandas as pd
import streamlit as st
import matplotlib.pyplot as plt
import matplotlib as mpl
import textwrap
import os
import urllib.request
import json as _json

# ---------------- Fonts (Thai) ----------------
# ‡∏û‡∏¢‡∏≤‡∏¢‡∏≤‡∏°‡πÉ‡∏ä‡πâ TH Sarabun New ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ô‡πÇ‡∏õ‡∏£‡πÄ‡∏à‡∏Å‡∏ï‡πå (‡πÄ‡∏ä‡πà‡∏ô thsarabunnew-webfont.ttf)
try:
    if os.path.exists("thsarabunnew-webfont.ttf"):
        mpl.font_manager.fontManager.addfont("thsarabunnew-webfont.ttf")
        mpl.rc("font", family="TH Sarabun New", size=20)
    else:
        # fallback ‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏ó‡∏¢‡πÑ‡∏î‡πâ‡∏î‡∏µ‡∏û‡∏≠‡∏Ñ‡∏ß‡∏£‡∏ö‡∏ô‡∏´‡∏•‡∏≤‡∏¢‡∏£‡∏∞‡∏ö‡∏ö
        plt.rcParams["font.family"] = "Tahoma"
        mpl.rc("font", family="DejaVu Sans", size=12)
except Exception:
    plt.rcParams["font.family"] = "DejaVu Sans"

plt.rcParams["axes.unicode_minus"] = False

# ---------------- Page Config ----------------
st.set_page_config(page_title="MCQ Answer Sheet", page_icon="üìù", layout="centered")

# ---------------- Secrets / Config ----------------
GAS_WEBAPP_URL = st.secrets.get("gas", {}).get("webapp_url", "").strip()
TEACHER_KEY   = st.secrets.get("app", {}).get("teacher_key", "").strip()
TIMEOUT       = 25

# ---------------- GAS Helpers ----------------
def gas_get(action: str, params: dict | None = None):
    if not GAS_WEBAPP_URL:
        raise RuntimeError("GAS_WEBAPP_URL is not set.")
    url = f"{GAS_WEBAPP_URL}?action={action}"
    if params:
        for k, v in params.items():
            url += f"&{k}={requests.utils.quote(str(v))}"
    r = requests.get(url, timeout=TIMEOUT)
    ct = r.headers.get("Content-Type", "")
    body_preview = (r.text or "")[:800]
    if r.status_code != 200:
        raise RuntimeError(f"GAS HTTP {r.status_code} ({ct}) ‚Äî {body_preview}")
    try:
        return r.json()
    except Exception:
        raise RuntimeError(f"GAS ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ({ct}) ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {body_preview}")

def gas_post(action: str, payload: dict):
    if not GAS_WEBAPP_URL:
        raise RuntimeError("GAS_WEBAPP_URL is not set.")
    url = f"{GAS_WEBAPP_URL}?action={action}"
    r = requests.post(url, json=payload, timeout=30)
    ct = r.headers.get("Content-Type", "")
    body_preview = (r.text or "")[:800]
    if r.status_code != 200:
        raise RuntimeError(f"GAS HTTP {r.status_code} ({ct}) ‚Äî {body_preview}")
    try:
        return r.json()
    except Exception:
        raise RuntimeError(f"GAS ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏ä‡πà JSON ({ct}) ‚Äî ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á: {body_preview}")

# ---------------- Routing (via ?mode=...) ----------------
raw_mode = st.query_params.get("mode", "exam")
if isinstance(raw_mode, list) and raw_mode:
    raw_mode = raw_mode[0]
mode = str(raw_mode).strip().lower()

# ====================== Student Page ======================
from datetime import datetime, timezone

def is_within_window(start_utc: str, end_utc: str) -> tuple[bool, str]:
    try:
        if not start_utc or not end_utc:
            # ‡∏ñ‡πâ‡∏≤‡∏Ç‡∏≤‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÉ‡∏î‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏´‡∏ô‡∏∂‡πà‡∏á = ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤
            return True, "‡πÑ‡∏°‡πà‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÄ‡∏ß‡∏•‡∏≤"
        now = datetime.now(timezone.utc)
        start = datetime.fromisoformat(start_utc.replace("Z", "+00:00"))
        end   = datetime.fromisoformat(end_utc.replace("Z", "+00:00"))
        if now < start:
            return False, f"‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö (‡πÄ‡∏£‡∏¥‡πà‡∏° {start_utc})"
        if now > end:
            return False, f"‡∏´‡∏°‡∏î‡πÄ‡∏ß‡∏•‡∏≤‡∏ó‡∏≥‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÅ‡∏•‡πâ‡∏ß (‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î {end_utc})"
        return True, ""
    except Exception as e:
        # ‡∏ñ‡πâ‡∏≤‡∏û‡∏≤‡∏£‡πå‡∏™‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ ‡πÉ‡∏´‡πâ‡∏õ‡∏•‡πà‡∏≠‡∏¢‡∏ú‡πà‡∏≤‡∏ô (‡πÑ‡∏°‡πà‡∏•‡πá‡∏≠‡∏Å) ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏ö‡∏•‡πá‡∏≠‡∏Ñ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡πÇ‡∏î‡∏¢‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î
        return True, f"‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÄ‡∏ß‡∏•‡∏≤‡πÑ‡∏î‡πâ ({e})"

def page_exam():
    st.markdown("### üìù ‡∏Å‡∏£‡∏∞‡∏î‡∏≤‡∏©‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö MCQ (‡∏°‡∏∑‡∏≠‡∏ñ‡∏∑‡∏≠) ‚Äî ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡∏Å‡∏≥‡∏´‡∏ô‡∏î")
    if not GAS_WEBAPP_URL:
        st.warning("‚ö†Ô∏è ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ [gas.webapp_url] ‡πÉ‡∏ô Secrets ‡∏Å‡πà‡∏≠‡∏ô")
        return

    # 1) ‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö
    try:
        js = gas_get("get_active_exam")
        if not js.get("ok"):
            st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà (Active Exam)")
            st.info("‡πÉ‡∏´‡πâ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÑ‡∏õ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏ô‡πâ‡∏≤ Dashboard")
            return
        exam = js["data"]
    except Exception as e:
        st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        return

    qn = int(exam.get("question_count", 0))
    exam_id = exam.get("exam_id", "")
    st.info(f"‡∏ä‡∏∏‡∏î: {exam_id} ‚Ä¢ {exam.get('title','')} ‚Ä¢ ‡∏à‡∏≥‡∏ô‡∏ß‡∏ô {qn} ‡∏Ç‡πâ‡∏≠ (‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å A‚ÄìE)")

    # 2) ‡∏ï‡∏£‡∏ß‡∏à‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤ (‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ñ‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏ä‡πà‡∏ß‡∏á)
    time_mode_raw = (exam.get("time_mode", "") or "").strip().lower()
    window_start  = exam.get("window_start_utc", "") or ""
    window_end    = exam.get("window_end_utc", "") or ""

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ start ‡πÅ‡∏•‡∏∞ end ‡πÉ‡∏´‡πâ‡∏ñ‡∏∑‡∏≠‡∏ß‡πà‡∏≤ "‡∏•‡πá‡∏≠‡∏Å‡πÄ‡∏ß‡∏•‡∏≤" ‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏Ñ‡πà‡∏≤ time_mode ‡∏à‡∏∞‡πÄ‡∏õ‡πá‡∏ô‡∏≠‡∏∞‡πÑ‡∏£
    has_window = bool(window_start and window_end)
    ok_time, msg_time = is_within_window(window_start, window_end)

    if has_window and not ok_time:
        st.error(f"‚è∞ {msg_time}")
        st.info(f"‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö (UTC): {window_start} ‚Üí {window_end}")
        # üîí ‡∏õ‡∏¥‡∏î‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏ó‡∏±‡∏ô‡∏ó‡∏µ: ‡πÑ‡∏°‡πà render ‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á
        return
    elif has_window:
        st.caption(f"üïí ‡∏ä‡πà‡∏ß‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡∏™‡∏≠‡∏ö (UTC): {window_start} ‚Üí {window_end}")

    # 3) ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô baseline ‡πÄ‡∏î‡∏¥‡∏°‡∏ï‡πà‡∏≠‡πÑ‡∏õ (‡∏ü‡∏≠‡∏£‡πå‡∏° + ‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö)
    ss = st.session_state
    ss.setdefault("submitted", False)
    ss.setdefault("pending_submit_payload", None)
    ss.setdefault("submit_result", None)
    ss.setdefault("submit_error", None)
    ss.setdefault("answers", [""] * qn)

    if ss["submit_result"] is not None:
        ss["submitted"] = True

    is_pending = ss["pending_submit_payload"] is not None
    disabled_all = ss["submitted"] or is_pending

    with st.form("exam_form", clear_on_submit=False):
        name = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏™‡∏≠‡∏ö", placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", disabled=disabled_all)

        options = ["A", "B", "C", "D", "E"]
        if len(ss["answers"]) != qn:
            ss["answers"] = [""] * qn

        for i in range(qn):
            current = ss["answers"][i]
            choice = st.radio(
                f"‡∏Ç‡πâ‡∏≠ {i+1}",
                options=[""] + options,
                index=([""] + options).index(current) if current in ([""] + options) else 0,
                horizontal=True,
                disabled=disabled_all,
                key=f"q_{i+1}_radio_form",
            )
            ss["answers"][i] = choice
            st.divider()

        submitted_form = st.form_submit_button(
            "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö",
            type="primary",
            use_container_width=True,
            disabled=disabled_all,
        )

    if submitted_form and not ss["submitted"]:
        if not name.strip():
            ss["submit_error"] = "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ä‡∏∑‡πà‡∏≠"
        else:
            ss["submit_error"] = None
            ss["pending_submit_payload"] = {
                "exam_id": exam_id,
                "student_name": name.strip(),
                "answers": ss["answers"],
            }

    if ss["pending_submit_payload"] is not None:
        with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö..."):
            try:
                js2 = gas_post("submit", ss["pending_submit_payload"])
                if js2.get("ok"):
                    ss["submit_result"] = js2["data"]
                    ss["submitted"] = True
                    ss["submit_error"] = None
                else:
                    err = js2.get("error") or "‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à"
                    ss["submit_error"] = err
                    ss["submitted"] = (err == "DUPLICATE_SUBMISSION")
            except Exception as e:
                ss["submit_error"] = f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}"
                ss["submitted"] = False
            finally:
                ss["pending_submit_payload"] = None
        st.rerun()

    if ss["submit_error"]:
        st.error(ss["submit_error"])

    if ss["submit_result"]:
        res = ss["submit_result"]
        st.success(f"‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ‚úÖ ‡πÑ‡∏î‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô {res['score']} / {qn} ({res['percent']}%)")
        with st.expander("‡∏î‡∏π‡πÄ‡∏â‡∏•‡∏¢‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠ / ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå"):
            df = pd.DataFrame(res["detail"])
            df["status"] = df["is_correct"].map({True: "‡∏ñ‡∏π‡∏Å", False: "‡∏ú‡∏¥‡∏î"})
            df = df[["q", "ans", "correct", "status"]]
            df.columns = ["‡∏Ç‡πâ‡∏≠", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö", "‡πÄ‡∏â‡∏•‡∏¢", "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"]
            st.dataframe(df, hide_index=True, use_container_width=True)

# ====================== Teacher Dashboard ======================
def page_dashboard():
    st.markdown("### üë©‚Äçüè´ Dashboard ‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå ‚Äî ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Active Exam ‡πÅ‡∏•‡∏∞‡∏î‡∏π‡∏ú‡∏•")
    if not TEACHER_KEY:
        st.error("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå‡πÉ‡∏ô Secrets (app.teacher_key)")
        return

    key_in = st.text_input("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏≠‡∏≤‡∏à‡∏≤‡∏£‡∏¢‡πå", type="password")
    if st.button("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö", use_container_width=True) or key_in:
        if key_in != TEACHER_KEY:
            st.error("‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á")
            st.stop()
            return
        st.success("‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö‡πÅ‡∏•‡πâ‡∏ß ‚úÖ")

        # ‡πÇ‡∏´‡∏•‡∏î Config/Exams
        try:
            cfg = gas_get("get_config")
            if not cfg.get("ok"):
                st.error(cfg.get("error", "Config error"))
                return
            exams = cfg["data"]["exams"]
            active_id = cfg["data"].get("active_exam_id", "")
        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
            return

        if not exams:
            st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó 'Exams'")
            return

        # ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö Active
        id_to_title = {e["exam_id"]: e["title"] for e in exams}
        options = [e["exam_id"] for e in exams]
        current_idx = options.index(active_id) if active_id in options else 0

        new_idx = st.selectbox(
            "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ä‡∏∏‡∏î‡∏Ç‡πâ‡∏≠‡∏™‡∏≠‡∏ö‡∏ó‡∏µ‡πà‡∏à‡∏∞‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô (Active)",
            options=list(range(len(options))),
            index=current_idx,
            format_func=lambda i: f"{options[i]} ‚Äî {id_to_title[options[i]]}",
        )
        chosen_id = options[new_idx]

        col1, col2 = st.columns([1, 1])
        with col1:
            if st.button("‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô Active Exam", type="primary", use_container_width=True):
                try:
                    js = gas_post("set_active_exam", {"exam_id": chosen_id, "teacher_key": TEACHER_KEY})
                    if js.get("ok"):
                        st.success(f"‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Active Exam ‡πÄ‡∏õ‡πá‡∏ô {chosen_id} ‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢")
                    elif js.get("error") == "UNAUTHORIZED":
                        st.error("‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï (‡∏ï‡∏£‡∏ß‡∏à TEACHER_KEY ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ó Config ‡∏Ç‡∏≠‡∏á GAS)")
                    else:
                        st.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {js.get('error')}")
                except Exception as e:
                    st.error(f"‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")
        with col2:
            st.caption(f"‡∏ä‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡∏≠‡∏¢‡∏π‡πà‡∏ï‡∏≠‡∏ô‡∏ô‡∏µ‡πâ: **{active_id or '‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡∏ï‡∏±‡πâ‡∏á'}**")

        st.subheader("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
        try:
            jsr = gas_get("get_dashboard", {"exam_id": chosen_id})
            if not jsr.get("ok"):
                st.error(jsr.get("error", "Unknown error"))
                return
            records = jsr["data"]
            if not records:
                st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏Ç‡∏≠‡∏á‡∏ä‡∏∏‡∏î‡∏ô‡∏µ‡πâ")
                return

            df = pd.DataFrame(records)
            if "timestamp" in df.columns:
                df["timestamp"] = pd.to_datetime(df["timestamp"], errors="coerce")
                df = df.sort_values("timestamp", ascending=True)

            st.subheader("‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏£‡∏≤‡∏¢‡∏Ñ‡∏ô")
            show = df[["timestamp", "student_name", "score", "percent", "answers"]].copy()
            show.columns = ["‡πÄ‡∏ß‡∏•‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô", "‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå", "‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö"]
            st.dataframe(show, hide_index=True, use_container_width=True)

            st.subheader("‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°")
            avg = float(df["percent"].astype(float).mean())
            best = int(df["percent"].astype(float).max())
            worst = int(df["percent"].astype(float).min())
            st.write(f"‡∏Ñ‡πà‡∏≤‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢: {avg:.1f}% | ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {best}% | ‡∏ï‡πà‡∏≥‡∏™‡∏∏‡∏î: {worst}%")

            # === ‡∏Å‡∏£‡∏≤‡∏ü‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢ (‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô) ===
            plot_df = df[["student_name", "percent"]].copy()
            plot_df["student_name"] = plot_df["student_name"].astype(str).str.strip()

            def wrap_label(s, width=10):
                return "\n".join(textwrap.wrap(s, width=width))

            plot_df["label"] = plot_df["student_name"].apply(lambda s: wrap_label(s, width=10))
            plot_df = plot_df.sort_values("percent", ascending=True)

            fig, ax = plt.subplots(figsize=(10, max(3, 0.6 * len(plot_df))))
            ax.barh(plot_df["label"], plot_df["percent"])
            ax.set_xlim(0, 100)
            ax.set_xlabel("Percent", fontsize=12)
            ax.set_ylabel("‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", fontsize=12)
            ax.set_title(f"‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô (%) ‡∏ï‡πà‡∏≠‡∏Ñ‡∏ô ‚Ä¢ {chosen_id}", fontsize=14, pad=12)
            ax.tick_params(axis="both", labelsize=12)
            for i, v in enumerate(plot_df["percent"].to_list()):
                ax.text(v + 1, i, f"{int(v)}%", va="center", fontsize=11)
            plt.tight_layout()
            st.pyplot(fig, use_container_width=True)

            # === Item Analysis (‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠) ===
            first_detail = df.iloc[0]["detail"] if "detail" in df.columns else None
            qn_items = len(first_detail) if first_detail else 0
            if qn_items > 0:
                counts = [0] * qn_items
                total = len(df)
                for _, row in df.iterrows():
                    ans = [s.strip().upper() for s in str(row.get("answers", "")).split(",")]
                    for i in range(qn_items):
                        if i < len(ans) and first_detail and ans[i] == first_detail[i]["correct"]:
                            counts[i] += 1
                perc = [round((c * 100) / total) if total > 0 else 0 for c in counts]
                item_df = pd.DataFrame({"‡∏Ç‡πâ‡∏≠": [i + 1 for i in range(qn_items)], "%‡∏ñ‡∏π‡∏Å": perc})
                st.subheader("Item Analysis")
                st.dataframe(item_df, hide_index=True, use_container_width=True)

                fig2, ax2 = plt.subplots(figsize=(10, 4.5))
                ax2.plot(item_df["‡∏Ç‡πâ‡∏≠"], item_df["%‡∏ñ‡∏π‡∏Å"], marker="o")
                ax2.set_xlabel("‡∏Ç‡πâ‡∏≠", fontsize=12)
                ax2.set_ylabel("% ‡∏ñ‡∏π‡∏Å", fontsize=12)
                ax2.set_title(f"Item Difficulty ‚Ä¢ {chosen_id}", fontsize=14, pad=12)
                ax2.set_ylim(0, 100)
                ax2.tick_params(axis="both", labelsize=12)
                for x, y in zip(item_df["‡∏Ç‡πâ‡∏≠"], item_df["%‡∏ñ‡∏π‡∏Å"]):
                    ax2.text(x, y + 2, f"{y}%", ha="center", fontsize=10)
                plt.tight_layout()
                st.pyplot(fig2, use_container_width=True)

# ===== Item Analysis: ‡∏Ç‡πâ‡∏≠‡πÑ‡∏´‡∏ô‡πÄ‡∏î‡πá‡∏Å‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞? =====
# ‡πÅ‡∏õ‡∏•‡∏á detail ‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô list ‡πÄ‡∏™‡∏°‡∏≠ + ‡∏´‡∏≤ qn (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ç‡πâ‡∏≠)
details = []
qn_items = 0
if "detail" in df.columns:
    for v in df["detail"]:
        try:
            d = v if isinstance(v, list) else _json.loads(v) if isinstance(v, str) else []
        except Exception:
            d = []
        details.append(d)
        if isinstance(d, list):
            qn_items = max(qn_items, len(d))
else:
    details = []
    qn_items = 0

if qn_items == 0:
    st.info("‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏•‡∏¢‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠ (detail) ‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Item Analysis")
else:
    total = len(details)
    correct_counts = [0] * qn_items
    # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠
    for d in details:
        for i in range(qn_items):
            if i < len(d):
                item = d[i]
                ok = False
                if isinstance(item, dict):
                    ok = bool(item.get("is_correct"))
                # ‡πÄ‡∏ú‡∏∑‡πà‡∏≠‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÉ‡∏ô‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï
                elif isinstance(item, (list, tuple)) and len(item) >= 1:
                    ok = bool(item[0])
                if ok:
                    correct_counts[i] += 1

    wrong_counts = [total - c for c in correct_counts]
    perc_correct = [round((c * 100) / total) if total > 0 else 0 for c in correct_counts]

    # ‡∏ï‡∏≤‡∏£‡∏≤‡∏á‡∏™‡∏£‡∏∏‡∏õ
    item_df = pd.DataFrame({
        "‡∏Ç‡πâ‡∏≠": [i + 1 for i in range(qn_items)],
        "‡∏ñ‡∏π‡∏Å(‡∏Ñ‡∏ô)": correct_counts,
        "‡∏ú‡∏¥‡∏î(‡∏Ñ‡∏ô)": wrong_counts,
        "%‡∏ñ‡∏π‡∏Å": perc_correct,
    })

    st.subheader("üìå Item Analysis ‚Äî ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏£‡∏≤‡∏¢‡∏Ç‡πâ‡∏≠")
    st.dataframe(item_df, hide_index=True, use_container_width=True)

    # ===== ‡∏Å‡∏£‡∏≤‡∏ü 1: % ‡∏ñ‡∏π‡∏Å ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏ï‡πà‡∏≥‚Üí‡∏™‡∏π‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏´‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡∏≠‡∏¢‡∏π‡πà‡∏ö‡∏ô‡∏™‡∏∏‡∏î) =====
    plot1 = item_df.sort_values("%‡∏ñ‡∏π‡∏Å", ascending=True)
    fig1, ax1 = plt.subplots(figsize=(10, max(3.5, 0.5 * len(plot1))))
    ax1.barh(plot1["‡∏Ç‡πâ‡∏≠"].astype(str), plot1["%‡∏ñ‡∏π‡∏Å"])
    ax1.set_xlabel("% ‡∏ñ‡∏π‡∏Å", fontsize=12)
    ax1.set_ylabel("‡∏Ç‡πâ‡∏≠", fontsize=12)
    ax1.set_xlim(0, 100)
    ax1.set_title("‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå‡∏ï‡∏≠‡∏ö‡∏ñ‡∏π‡∏Å‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠ (‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏à‡∏≤‡∏Å‡∏¢‡∏≤‡∏Å‚Üí‡∏á‡πà‡∏≤‡∏¢)", fontsize=14, pad=12)
    for i, v in enumerate(plot1["%‡∏ñ‡∏π‡∏Å"].tolist()):
        ax1.text(v + 1, i, f"{v}%", va="center", fontsize=11)
    plt.tight_layout()
    st.pyplot(fig1, use_container_width=True)

    # ===== ‡∏Å‡∏£‡∏≤‡∏ü 2: ‡∏ã‡πâ‡∏≠‡∏ô Correct/Wrong ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠ (‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°) =====
    plot2 = item_df.copy()  # ‡πÑ‡∏°‡πà‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏á ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏á‡∏•‡∏≥‡∏î‡∏±‡∏ö‡∏Ç‡πâ‡∏≠ 1..n
    fig2, ax2 = plt.subplots(figsize=(10, max(3.5, 0.5 * len(plot2))))
    y = plot2["‡∏Ç‡πâ‡∏≠"].astype(str)
    ax2.barh(y, plot2["‡∏ú‡∏¥‡∏î(‡∏Ñ‡∏ô)"], label="Wrong")
    ax2.barh(y, plot2["‡∏ñ‡∏π‡∏Å(‡∏Ñ‡∏ô)"], left=plot2["‡∏ú‡∏¥‡∏î(‡∏Ñ‡∏ô)"], label="Correct")
    ax2.set_xlabel("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô", fontsize=12)
    ax2.set_ylabel("‡∏Ç‡πâ‡∏≠", fontsize=12)
    ax2.set_title("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏ñ‡∏π‡∏Å/‡∏ú‡∏¥‡∏î ‡∏ï‡πà‡∏≠‡∏Ç‡πâ‡∏≠ (Stacked)", fontsize=14, pad=12)
    ax2.legend(loc="lower right")
    plt.tight_layout()
    st.pyplot(fig2, use_container_width=True)

    # ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î (‡∏ä‡πà‡∏ß‡∏¢‡∏™‡∏£‡∏∏‡∏õ)
    hardest = plot1.iloc[0]
    st.caption(f"üîé ‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ú‡∏¥‡∏î‡πÄ‡∏¢‡∏≠‡∏∞‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î: ‡∏Ç‡πâ‡∏≠ {hardest['‡∏Ç‡πâ‡∏≠']} (‡∏ñ‡∏π‡∏Å {hardest['%‡∏ñ‡∏π‡∏Å']}%)")


        except Exception as e:
            st.error(f"‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß: {e}")

# ---------------- Run ----------------
if mode == "dashboard":
    page_dashboard()
else:
    page_exam()
